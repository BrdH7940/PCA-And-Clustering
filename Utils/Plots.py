from Utils.Utils import *
from ClusteringAlgorithm.KMeans import MyKMeans
from PCA import MyPCA

def plot_explained_variance_ratio(pca, component_ax_kwargs=None, cumulative_ax_kwargs=None, customizations=None, legend_location=(0.85, 0.7)):
    """
    V·∫Ω bi·ªÉu ƒë·ªì t·ª∑ l·ªá ph∆∞∆°ng sai theo s·ªë th√†nh ph·∫ßn ch√≠nh cho m√¥ h√¨nh PCA ƒë√£ ƒë∆∞·ª£c hu·∫•n luy·ªán.
    
    Tham s·ªë:
    ----------
    pca : PCA
        M√¥ h√¨nh PCA ƒë√£ ƒë∆∞·ª£c hu·∫•n luy·ªán
    fig_kwargs : dict
        Tham s·ªë cho h√¨nh v·∫Ω
    component_ax_kwargs : dict
        Tham s·ªë cho bi·ªÉu ƒë·ªì th√†nh ph·∫ßn ri√™ng l·∫ª
    cumulative_ax_kwargs : dict
        Tham s·ªë cho bi·ªÉu ƒë·ªì t√≠ch l≈©y
    customizations : dict
        Tham s·ªë t√πy ch·ªânh cho tr·ª•c
    legend_location: Tuple(float, float)
        V·ªã tr√≠ ch√∫ th√≠ch tr√™n bi·ªÉu ƒë·ªì
        
    Tr·∫£ v·ªÅ:
    -------
    Tuple(Figure, Axes)
        ƒê·ªëi t∆∞·ª£ng h√¨nh v·∫Ω v√† tr·ª•c t·ªça ƒë·ªô
    """
    fig_kwargs = fig_kwargs or {"figsize": (9, 6)}

    if component_ax_kwargs is None:
        component_ax_kwargs = {
            "color": "purple",
            "linewidth": 2,
            "label": "Individual Component",
        }

    if cumulative_ax_kwargs is None:
        cumulative_ax_kwargs = {
            "color": "orange",
            "linewidth": 2,
            "label": "Cumulative",
        }
        
    if customizations is None:
        customizations = {
            "title": "T·ª∑ l·ªá ph∆∞∆°ng sai gi·∫£i th√≠ch theo s·ªë l∆∞·ª£ng th√†nh ph·∫ßn ch√≠nh",
            "xlabel": "S·ªë l∆∞·ª£ng th√†nh ph·∫ßn ch√≠nh",
            "ylabel": "T·ª∑ l·ªá ph∆∞∆°ng sai gi·∫£i th√≠ch",
        }

    # T·∫°o bi·ªÉu ƒë·ªì
    fig, ax = plt.subplots(**fig_kwargs)

    # Plot explained variance ratio by component
    x_range = range(1, pca.n_components + 1)
    ax.plot(x_range, pca.EVR, **component_ax_kwargs)

    # Plot cumulative explained variance
    cumulative_sum = np.cumsum(pca.EVR)
    ax.plot(x_range, cumulative_sum, **cumulative_ax_kwargs)

    # T√πy ch·ªânh tr·ª•c v√† ti√™u ƒë·ªÅ
    ax.set(**customizations)
    fig.legend(bbox_to_anchor=legend_location)
    ax.set_xticks(x_range)
    ax.set_xticklabels(x_range)

    return fig, ax

def create_explained_variance_df(pca):
    """
    T·∫°o DataFrame ƒë·ªÉ hi·ªÉn th·ªã th√¥ng tin c·ªßa bi·ªÉu ƒë·ªì.
    
    Tham s·ªë:
    ----------
    pca : PCA
        M√¥ h√¨nh PCA ƒë√£ ƒë∆∞·ª£c hu·∫•n luy·ªán
        
    Tr·∫£ v·ªÅ:
    -------
    pd.DataFrame
        DataFrame ch·ª©a ph∆∞∆°ng sai (theo t·ª´ng th√†nh ph·∫ßn v√† t√≠ch l≈©y)
    """
    results_dict = {
        "Th√†nh ph·∫ßn ri√™ng l·∫ª - Individual Component": pca.EVR,
        "Th√†nh ph·∫ßn t√≠ch l≈©y - Cumulative": np.cumsum(pca.EVR),
    }
    index = range(1, pca.n_components + 1)
    df = pd.DataFrame(results_dict, index=index)
    df.index.name = "# Th√†nh ph·∫ßn"
    return df


def plot_accuracy_by_pc(X_scaled, true_labels, max_components=10):
    """
    V·∫Ω bi·ªÉu ƒë·ªì ƒë·ªô ch√≠nh x√°c theo s·ªë th√†nh ph·∫ßn ch√≠nh v√† x√°c ƒë·ªãnh s·ªë th√†nh ph·∫ßn t·ªëi ∆∞u.
    
    Tham s·ªë:
    ----------
    X_scaled : np.array
        D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c chu·∫©n h√≥a
    true_labels : array
        Nh√£n th·ª±c t·∫ø
    max_components : int, optional
        S·ªë th√†nh ph·∫ßn ch√≠nh t·ªëi ƒëa c·∫ßn th·ª≠, m·∫∑c ƒë·ªãnh l√† 10
        
    Tr·∫£ v·ªÅ:
    -------
    int
        S·ªë th√†nh ph·∫ßn ch√≠nh t·ªëi ∆∞u
    """
    accuracies = []
    true_labels = np.array(true_labels)

    for n_components in range(1, max_components + 1):
        # Gi·∫£m chi·ªÅu b·∫±ng MyPCA
        pca = MyPCA(n_components=n_components)
        X_pca = pca.fit_transform(X_scaled)

        # Ph√¢n c·ª•m b·∫±ng MyKMeans
        kmeans = MyKMeans(n_clusters=2, random_state=42)
        kmeans.fit(X_pca)
        predicted_labels = kmeans.predict(X_pca)

        # T√¨m ho√°n v·ªã nh√£n t·ªët nh·∫•t
        max_accuracy = 0
        for perm in permutations([0, 1]):
            permuted = np.array([perm[label] for label in predicted_labels])
            acc = np.mean(permuted == true_labels)
            max_accuracy = max(max_accuracy, acc)

        accuracies.append(max_accuracy)
        print(f"    üîπS·ªë th√†nh ph·∫ßn: {n_components}, Accuracy: {max_accuracy:.2%}")

    # V·∫Ω bi·ªÉu ƒë·ªì
    plt.figure(figsize=(10, 5))
    plt.plot(range(1, max_components + 1), accuracies, marker='o', linewidth=2)
    plt.title('ƒê·ªô ch√≠nh x√°c theo s·ªë th√†nh ph·∫ßn ch√≠nh')
    plt.xlabel('S·ªë th√†nh ph·∫ßn ch√≠nh')
    plt.ylabel('ƒê·ªô ch√≠nh x√°c')
    plt.xticks(range(1, max_components + 1))
    plt.grid(True)
    plt.show()

    optimal_n = np.argmax(accuracies) + 1
    print(f"\nüî∏ S·ªë th√†nh ph·∫ßn ch√≠nh t·ªëi ∆∞u: {optimal_n}")
    print(f"üî∏ ƒê·ªô ch√≠nh x√°c t·ªëi ƒëa ·ª©ng v·ªõi {optimal_n} th√†nh ph·∫ßn ch√≠nh: {max(accuracies):.2%}")

    return optimal_n
